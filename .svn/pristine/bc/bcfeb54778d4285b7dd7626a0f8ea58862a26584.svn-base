# coding=utf-8
from django.forms import ModelForm
from django.forms.widgets import RadioFieldRenderer
from django.utils.encoding import force_unicode
from django.utils.safestring import mark_safe
from searcher.models import UserInformation

__author__ = 'py'
from django import forms


class ContactForm(forms.Form):
    subject = forms.CharField(max_length=100)
    email = forms.EmailField(required=False)
    message = forms.CharField(widget=forms.Textarea)

    def clean_message(self):
        message = self.cleaned_data['message']
        num_words = len(message.split())
        if num_words < 4:
            raise forms.ValidationError("Not enough words!")
        return message


class SearchForm(forms.Form):
    searchWord = forms.IntegerField(required=False, widget=forms.TextInput(
        attrs={'type': 'text', 'class': 'fl', 'placeholder': '请输入投资金额',
               'style': 'width:500px; height:30px; line-height:30px; '
                        'border:1px solid #ddd; padding:5px; font-size:18px; color:#999;'}))


class LoginForm(forms.Form):
    username = forms.CharField(
        required=True,
        label=u"用户名",
        error_messages={'required': '请输入用户名'},
        widget=forms.TextInput(
            attrs={
                'placeholder': u"用户名",
                'type': 'text',
                'name': 'name',
                'class': 'inputxt'
            }
        ),
    )
    password = forms.CharField(
        required=True,
        label=u"密码",
        error_messages={'required': u'请输入密码'},
        widget=forms.PasswordInput(
            attrs={
                'placeholder': u"密码",
                'type': 'password',
                'name': 'userpassword',
                'class': 'inputxt'
            }
        ),
    )
    vcode = forms.CharField(
        required=True,
        label=u"验证码",
        error_messages={'required': u'请输入验证码'},
        widget=forms.TextInput(
            attrs={
                'placeholder': u"验证码",
                'type': 'text',
                'name': 'yzm',
                'class': 'inputxt'
            }
        ),
    )

    def clean(self):
        if not self.is_valid():
            raise forms.ValidationError(u"用户名和密码为必填项")
        else:
            return super(LoginForm, self).clean()

    def valiatetype(self, a):
        global msg
        if a == 2:
            msg = u"用户不存在"
            self._errors["username"] = self.error_class([msg])
        elif a == 3:
            msg = u"用户被锁定"
            self._errors["username"] = self.error_class([msg])
        elif a == 4:
            msg = u"验证码错误"
            self._errors["vcode"] = self.error_class([msg])


class TRegForm(forms.Form):
    username = forms.CharField(
        required=True,
        label=u"用户名",
        error_messages={'required': '请输入用户名'},
        widget=forms.TextInput(
            attrs={
                'placeholder': u"用户名",
            }
        ),
    )
    email = forms.EmailField(
        required=True,
        label=u"email",
        error_messages={'required': '请输入email'},
        widget=forms.TextInput(
            attrs={
                'placeholder': u"email",
            }
        ),
    )
    wbid = forms.CharField(
        required=False,
        label=u"微博ID",
        widget=forms.HiddenInput(attrs={'value': 'a'}),
    )
    openid = forms.CharField(
        required=False,
        label=u"OPENID",
        widget=forms.HiddenInput(attrs={'value': 'a'}),
    )
    accessToken = forms.CharField(
        required=False,
        label=u"访问秘钥",
        widget=forms.HiddenInput(attrs={'value': 'a'}),
    )
    url = forms.CharField(
        required=False,
        label=u"头像路径",
        widget=forms.HiddenInput(attrs={'value': 'a'}),
    )



class FavoriteForm(forms.Form):
    user_id = forms.IntegerField()
    favorite_type = forms.IntegerField()
    favorite_id = forms.IntegerField()


class MyCustomRenderer(RadioFieldRenderer):
    def render(self):
        """Outputs a series of label fields for this set of radio fields."""
        return mark_safe(u'&nbsp;&nbsp;'.join([u'%s' % force_unicode(w) for w in self]))


class UserInformationForm(ModelForm):
    class Meta:
        model = UserInformation
        fields = ('nickname', 'realname', 'gender', 'birthday', 'cellphone', 'email', 'city', 'address', 'education',
                  'monthly_income', 'marriage', 'qq_num', 'wechat_num', 'weibo_num')
        widgets = {
            'nickname': forms.TextInput(attrs={'class': 'user_text'}),
            'realname': forms.TextInput(attrs={'class': 'user_text'}),
            'gender': forms.RadioSelect(renderer=MyCustomRenderer, attrs={'class': 'user_radio'}),
            'birthday': forms.TextInput(attrs={'class': 'user_text'}),
            'cellphone': forms.TextInput(attrs={'class': 'user_text'}),
            'email': forms.EmailInput(attrs={'class': 'user_text'}),
            'city': forms.TextInput(attrs={'class': 'user_text'}),
            'address': forms.TextInput(attrs={'class': 'user_text'}),
            'education': forms.Select(attrs={'class': 'user_select'}),
            'monthly_income': forms.Select(attrs={'class': 'user_select'}),
            'marriage': forms.RadioSelect(renderer=MyCustomRenderer, attrs={'class': 'user_radio'}),
            'qq_num': forms.TextInput(attrs={'class': 'user_text'}),
            'wechat_num': forms.TextInput(attrs={'class': 'user_text'}),
            'weibo_num': forms.TextInput(attrs={'class': 'user_text'}),
        }


class UserReminderForm(forms.Form):
    checkkb = forms.CheckboxInput(attrs={'class': 'user_checkbox'})
    checkmb = forms.CheckboxInput(attrs={'class': 'user_checkbox'})
    checkhk = forms.CheckboxInput(attrs={'class': 'user_checkbox'})

