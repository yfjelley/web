# coding=utf-8

from django.contrib import auth
from DjangoCaptcha import Captcha
from django.contrib.auth.models import User
from django.http import HttpResponseRedirect, HttpResponse
from django.shortcuts import render_to_response
from django.template import RequestContext
from searcher.forms import TRegForm, LoginForm, RegisterForm
from searcher.models import ThirdLogin, WXAccessToken
from searcher.models import UserInformation
from searcher.inner_views import user_auth, refresh_header
from django.core.urlresolvers import reverse
import httplib
import json
import time
from string import join
import hashlib
from django.utils.encoding import smart_str, smart_unicode
from xml.etree import ElementTree as etree
import sys
__author__ = 'laven'

# the following two line is use for recieving chinese string from wechat server
reload(sys)
sys.setdefaultencoding('utf8')

def qq_is_first(request):
    resp = 0
    if request.method == 'POST':
        response = HttpResponse()
        response['Content-Type'] = "text/javascript"
        u_ajax = request.POST.get('name', None)
        if u_ajax:
            response['Content-Type'] = "application/json"
            r_u = request.POST.get('param', None)
            u = User.objects.filter(username=r_u)
            if u.exists():
                response.write('{"info": "用户已存在","status": "n"}')  # 用户已存在
                return response
            else:
                response.write('{"info": "用户可以使用","status": "y"}')
                return response
        openid = request.POST.get('openid', '')
        accesstoken = request.POST.get('accessToken', '')
        username = request.POST.get('username', '')
        email = request.POST.get('email', '')
        nickname = request.POST.get('nickname', '')
        url = request.POST.get('url', '')
        if openid != "" and accesstoken != "" and username == "" and email == "":
            tl = ThirdLogin.objects.filter(openId=openid)
            if tl.exists():
                if tl[0].qqFlag == "1":
                    u = User.objects.filter(id=(UserInformation.objects.filter(id=tl[0].userInfo_id)[0].user_id))
                    username = u[0].username
                    resp = 1
                else:
                    resp = 0
            else:
                resp = 0
        elif username != "" and email != "" and openid != "" and accesstoken != "":
            u = User.objects.filter(username=username)
            if u.exists():
                resp = 2
            else:
                new_user = User.objects.create_user(username=username, password="openid", email=email)
                new_user.save()
                u = UserInformation(user=new_user, photo_url=url)
                u.save()
                tl = ThirdLogin(openId=openid, accessToken=accesstoken, qqFlag=0)
                tl.userInfo = u
                tl.qqFlag = 1
                tl.save()
                resp = 1
        else:
            print "qq something unhopeful happend!"

        if resp == 1:
            user = User.objects.get(username=username)
            user.is_active = True
            user.backend = 'django.contrib.auth.backends.ModelBackend'
            auth.login(request, user)
            if user is not None and user.is_active:
                auth.login(request, user)
            return HttpResponseRedirect('/')
        else:
            error = ''
            if resp == 2:
                error = "please input correctly!"
            form = TRegForm({'username': nickname, 'openid': openid, 'accessToken': accesstoken, 'url': url})
            return render_to_response("register.html", {'form': form, 'error': error, 'openid': openid}, context_instance=RequestContext(request))
    else:
        print "qq something unhopeful happend2!"
        # nickname = 'testqq'
        # openid = 'testqq_openid'
        # accesstoken = 'testqq_accessToken'
        # url = 'testqq_url'
        # form = TRegForm({'username': nickname, 'openid': openid, 'accessToken': accesstoken, 'url': url})
        # return render_to_response("register.html", {'form': form, 'openid': openid}, context_instance=RequestContext(request))

def wb_is_first(request):
    resp = 0
    if request.method == 'POST':
        response = HttpResponse()
        response['Content-Type'] = "text/javascript"
        wbid = request.POST.get('wbid', '')
        username = request.POST.get('username', '')
        email = request.POST.get('email', '')
        nickname = request.POST.get('nickname', '')
        url = request.POST.get('url', '')
        if wbid != "" and username == "" and email == "":
            tl = ThirdLogin.objects.filter(wbId=wbid)
            if tl.exists():
                if tl[0].wbFlag == "1":
                    u = User.objects.filter(id=(UserInformation.objects.filter(id=tl[0].userInfo_id)[0].user_id))
                    username = u[0].username
                    password = "wbid"
                    resp = 1
                else:
                    resp = 0
            else:
                resp = 0
        elif username != "" and email != "":
            u = User.objects.filter(username=username)
            if u.exists():
                resp = 2
            else:
                new_user = User.objects.create_user(username=username, password="wbid", email=email)
                new_user.save()
                u = UserInformation(user=new_user, photo_url=url)
                u.save()
                tl = ThirdLogin(wbId=wbid, wbFlag=0)
                tl.userInfo = u
                tl.wbFlag = 1
                tl.save()
                resp = 1
        else:
            print " wb something unhopeful happend!"

        if resp == 1:
            user = User.objects.get(username=username)
            user.is_active = True
            user.backend = 'django.contrib.auth.backends.ModelBackend'
            auth.login(request, user)
            if user is not None and user.is_active:
                auth.login(request, user)
            return HttpResponseRedirect('/')
        else:
            error = ''
            if resp == 2:
                error = "please input correctly!"
            form = TRegForm({'username': nickname, 'wbid': wbid, 'url': url})
            return render_to_response("register.html", {'form': form, 'error': error, 'wbid': wbid}, context_instance=RequestContext(request))
    else:
        print " wb something unhopeful happend2!"
        # nickname = 'testwb'
        # wbid = 'testwb_id'
        # url = 'testwb_url'
        # form = TRegForm({'username': nickname, 'wbid': wbid, 'url': url})
        # return render_to_response("register.html", {'form': form}, context_instance=RequestContext(request))

def wx_is_first(request):
    resp = 0
    if request.method == 'GET':
        response = HttpResponse()
        response['Content-Type'] = "text/javascript"
        code = request.GET.get("code")
        data = initData(code)
        wxopenid = data['openid']
        wxaccesstoken = data['access_token']
        info = initInfo(wxopenid, wxaccesstoken)
        username = request.POST.get('username', '')
        email = request.POST.get('email', '')
        nickname = info['nickname']
        url = info['headimgurl']
        if wxopenid != "" and wxaccesstoken != "" and username == "" and email == "":
            tl = ThirdLogin.objects.filter(wxopenId=wxopenid)
            if tl.exists():
                if tl[0].wxFlag == "1":
                    u = User.objects.filter(id=(UserInformation.objects.filter(id=tl[0].userInfo_id)[0].user_id))
                    username = u[0].username
                    resp = 1
                else:
                    resp = 0
            else:
                resp = 0
        else:
            print "wx something unhopeful happend!"

        if resp == 1:
            user = User.objects.get(username=username)
            user.is_active = True
            user.backend = 'django.contrib.auth.backends.ModelBackend'
            auth.login(request, user)
            if user is not None and user.is_active:
                auth.login(request, user)
            return HttpResponseRedirect('/')
        else:
            error = ''
            if resp == 2:
                error = "please input correctly!"
            form = TRegForm({'username': nickname, 'openid': wxopenid, 'accessToken': wxaccesstoken, 'url': url})
            return render_to_response("register.html", {'form': form, 'error': error, 'wxopenid': wxopenid}, context_instance=RequestContext(request))
    elif request.method == 'POST':
        response = HttpResponse()
        response['Content-Type'] = "text/javascript"
        wxopenid = request.POST.get('openid', '')
        wxaccesstoken = request.POST.get('accessToken', '')
        username = request.POST.get('username', '')
        email = request.POST.get('email', '')
        nickname = request.POST.get('nickname', '')
        url = request.POST.get('url', '')
        if username != "" and email != "" and wxopenid != "" and wxaccesstoken != "":
            u = User.objects.filter(username=username)
            if u.exists():
                resp = 2
            else:
                new_user = User.objects.create_user(username=username, password="wxopenid", email=email)
                new_user.save()
                u = UserInformation(user=new_user, photo_url=url)
                u.save()
                tl = ThirdLogin(wxopenId=wxopenid, wxaccessToken=wxaccesstoken, wxFlag=0)
                tl.userInfo = u
                tl.wxFlag = 1
                tl.save()
                resp = 1
        else:
            print "wx something unhopeful happend!"

        if resp == 1:
            user = User.objects.get(username=username)
            user.is_active = True
            user.backend = 'django.contrib.auth.backends.ModelBackend'
            auth.login(request, user)
            if user is not None and user.is_active:
                auth.login(request, user)
            return HttpResponseRedirect('/')
        else:
            error = ''
            if resp == 2:
                error = "please input correctly!"
            form = TRegForm({'username': nickname, 'openid': wxopenid, 'accessToken': wxaccesstoken, 'url': url})
            return render_to_response("register.html", {'form': form, 'error': error, 'wxopenid': wxopenid}, context_instance=RequestContext(request))

    else:
        print "wx something unhopeful happend2!"

def initData(code):
    httpClient = None
    try:
        httpClient = httplib.HTTPSConnection('api.weixin.qq.com', timeout=30)
        httpClient.request('GET', '/sns/oauth2/access_token?appid=wx5705d3f981443fb8&secret=46f37dba35e5b57b5b98cc2437296f6b&code='+code+'&grant_type=authorization_code')
        response = httpClient.getresponse()
        if response.status == 200 and response.reason == 'OK':
            url = response.read()
            print "url:|||:", url
            time = json.loads(url)
        return time
    except Exception, e:
        print "httpClient to 'api.weixin.qq.com' initData get an error!", e
    finally:
        if httpClient:
            httpClient.close()

def initInfo(openid, access_token):
    httpClient = None
    try:
        httpClient = httplib.HTTPSConnection('api.weixin.qq.com', timeout=30)
        httpClient.request('GET', '/sns/userinfo?access_token='+access_token+'&openid='+openid)
        response = httpClient.getresponse()
        if response.status == 200 and response.reason == 'OK':
            url = response.read()
            print "url:|||:", url
            time = json.loads(url)
        return time
    except Exception, e:
        print "httpClient to 'api.weixin.qq.com' initInfo get an error!", e
    finally:
        if httpClient:
            httpClient.close()

def wxcheck(request):
    print "get request wxcheck!"
    if request.method == 'GET':
        response = HttpResponse(checkSignature(request))
        return response
    else:
       print "xmlstr:|||", request.body
       try:
           xmlstr = smart_str(request.body)
           xml = etree.fromstring(xmlstr)
           ToUserName = xml.find('ToUserName').text
           FromUserName = xml.find('FromUserName').text
           CreateTime = xml.find('CreateTime').text
           MsgType = xml.find('MsgType').text
           reply_xml = "return_str"

           if MsgType == "event":
               Event = xml.find('Event').text
               if Event == "subscribe":
                   reply_xml = """<xml>
                   <ToUserName><![CDATA[%s]]></ToUserName>
                   <FromUserName><![CDATA[%s]]></FromUserName>
                   <CreateTime>%s</CreateTime>
                   <MsgType><![CDATA[text]]></MsgType>
                   <Content><![CDATA[%s]]></Content>
                   </xml>""" % (FromUserName, ToUserName, CreateTime,
                                "欢迎天天搜贷！为了您更好的使用我们的服务，请先<a href='www.ddbid.com/wx_binding?openid=" + FromUserName + "'>绑定</a>/<a href='www.ddbid.com/wx_register?openid=" + FromUserName + "'>创建</a>账号，谢谢！")
           elif MsgType == "text":
               Content = xml.find('Content').text
               MsgId = xml.find('MsgId').text
               reply_xml = """<xml>
               <ToUserName><![CDATA[%s]]></ToUserName>
               <FromUserName><![CDATA[%s]]></FromUserName>
               <CreateTime>%s</CreateTime>
               <MsgType><![CDATA[text]]></MsgType>
               <Content><![CDATA[%s]]></Content>
               </xml>""" % (FromUserName, ToUserName, CreateTime, Content + "  Hello! this is a text message!")
           else:
               reply_xml = """<xml>
               <ToUserName><![CDATA[%s]]></ToUserName>
               <FromUserName><![CDATA[%s]]></FromUserName>
               <CreateTime>%s</CreateTime>
               <MsgType><![CDATA[text]]></MsgType>
               <Content><![CDATA[%s]]></Content>
               </xml>""" % (FromUserName, ToUserName, CreateTime, "Hello!")
           print "return :|||", reply_xml
           return HttpResponse(reply_xml)
       except Exception, e:
           print "chinese in request at wxcheck!", e
           return HttpResponse(e)




def checkSignature(request):
    signature = request.GET.get('signature', None)
    timestamp = request.GET.get('timestamp', None)
    nonce = request.GET.get('nonce', None)
    echostr = request.GET.get('echostr', None)
    #这里的token我放在setting，可以根据自己需求修改
    token = "999ddbid"

    tmplist = [token, timestamp, nonce]
    tmplist.sort()
    tmpstr = "%s%s%s" % tuple(tmplist)
    tmpstr = hashlib.sha1(tmpstr).hexdigest()
    print "t:", tmpstr
    print "s:", signature
    if tmpstr == signature:
        return echostr
    else:
        return None
    # response = HttpResponse()
    # response['Content-Type'] = "text/javascript"
    # if request.method == "GET":
    #     print "get a get request!"
    #     signature = request.GET.get('signature', None)
    #     timestamp = request.GET.get('timestamp', None)
    #     nonce = request.GET.get('nonce', None)
    #     echostr = request.GET.get('echostr', None)
    #     li = ['999ddbid', timestamp, nonce]
    #     while lexicographically_next_permutation(li):
    #         1
    #     if timestamp != None and nonce != None and echostr != None and signature != None:
    #         li.reverse()
    #         str = join(li).replace(' ', '')
    #         str2 = hashlib.sha1(str).hexdigest()
    #         if str2 == signature:
    #             print "wxcheck is okokokokokokokok"
    #             response.write(echostr)  # 用户已存在
    #     else:
    #         response.write("get none")
    #
    # else:
    #     print "wxcheck get a post request"
    #     list = request.POST.lists()
    #     print "list:|||", list
    #     print "wxcheck use post method:"+request.method
    #     response.write("post none")
    # return response

# def lexicographically_next_permutation(a):
#     i = len(a) - 2
#     while not (i < 0 or a[i] < a[i+1]):
#         i -= 1
#     if i < 0:
#         return False
#     j = len(a) - 1
#     while not (a[j] > a[i]):
#         j -= 1
#     a[i], a[j] = a[j], a[i]
#     a[i+1:] = reversed(a[i+1:])
#     return True


def wx_binding(request):
    print "get a request in wx_binding"
    print "method is :"+request.method
    if request.method == 'POST':
        username = request.REQUEST.get('log_un', None)
        pwd = request.REQUEST.get('log_pwd', None)
        code = request.REQUEST.get('log_code', None)
        openid = request.REQUEST.get('openid', None)
        if username is None:
            form = LoginForm(request.POST)
            if form.is_valid():
                cd = form.clean()
                username = cd['username']
                pwd = cd['password']
                code = cd['vcode']
                i = user_auth(request, username, pwd, code)
                if i == 1:
                    a = request.REQUEST.get('next', None)
                    if a:
                        return HttpResponseRedirect(a)
                    else:
                        u = UserInformation.objects.filter(user_id=User.objects.filter(username=username)[0].id)
                        tl = ThirdLogin.objects.filter(userInfo_id=u[0].id)
                        if tl.exists():
                            tl = ThirdLogin.objects.get(userInfo_id=u[0].id)
                            print "tl:", tl
                            tl.wxopenId2 = openid
                            tl.save()
                        else:
                            tl = ThirdLogin(wxopenId2=openid, wxFlag2=0)
                            tl.userInfo = u[0]
                            tl.wxFlag2 = 1
                            tl.save()
                        return HttpResponseRedirect(reverse('searchindex'))
                else:
                    form.valiatetype(i)
                    return render_to_response('wx_login.html', {'form': form, },
                                              context_instance=RequestContext(request))
            else:
                return render_to_response('wx_login.html', {'form': form, },
                                          context_instance=RequestContext(request))

        return refresh_header(request, user_auth(request, username, pwd, code))
    else:
        form = LoginForm()
        next = request.GET.get('next', None)
        openid = request.GET.get('openid', None)
        return render_to_response('wx_login.html', {'form': form, 'next': next, 'openid': openid},
                                  context_instance=RequestContext(request))


def wx_register(request):
    if request.method == 'POST':
        response = HttpResponse()
        response['Content-Type'] = "text/javascript"
        openid = request.REQUEST.get('openid', None)
        u_ajax = request.POST.get('name', None)
        if u_ajax:
            response['Content-Type'] = "application/json"
            r_u = request.POST.get('param', None)
            u = User.objects.filter(username=r_u)
            if u.exists():
                response.write('{"info": "用户已存在","status": "n"}')  # 用户已存在
                return response
            else:
                response.write('{"info": "用户可以使用","status": "y"}')
                return response
        form = RegisterForm(request.POST)
        if form.is_valid():
            cd = form.cleaned_data
            username = cd['username']
            pwd1 = cd['password']
            pwd2 = cd['password2']
            em = cd['email']
            # nickname = cd['nickname']
            code = cd['vcode']
            ca = Captcha(request)
            flag = 0
            u = User.objects.filter(username=username)
            f = ca.check(code)
            if u.exists():
                form.valiatetype(2)
                flag = 1
            if pwd1 != pwd2:
                form.valiatetype(3)
                flag = 1
            if not f:
                form.valiatetype(4)
                flag = 1
            if flag == 1:
                return render_to_response("wx_reg.html", {'form': form}, context_instance=RequestContext(request))
            elif pwd1 == pwd2 and f:
                new_user = User.objects.create_user(username=username, password=pwd1)
                new_user.save()
                # initial={'photo_url': '/static/upload/default.png'}
                u = UserInformation(user=new_user, photo_url='/static/upload/default.png', email=em, abcdefg=pwd1)
                u.save()
                user = auth.authenticate(username=username, password=pwd1)
                auth.login(request, user)
                # return refresh_header(request, user_auth(request, username, pwd1, None))



                u = UserInformation.objects.filter(user_id=User.objects.filter(username=username)[0].id)
                tl = ThirdLogin.objects.filter(userInfo_id=u[0].id)
                if tl.exists():
                    tl = ThirdLogin.objects.get(userInfo_id=u[0].id)
                    print "tl:", tl
                    tl.wxopenId2 = openid
                    tl.save()
                else:
                    tl = ThirdLogin(wxopenId2=openid, wxFlag2=0)
                    tl.userInfo = u[0]
                    tl.wxFlag2 = 1
                    tl.save()




                #直接定向到首页
                return HttpResponseRedirect(reverse('searchindex'))
        else:
            return render_to_response("wx_reg.html", {'form': form}, context_instance=RequestContext(request))
    else:
        form = RegisterForm()
        openid = request.GET.get('openid', None)
        return render_to_response("wx_reg.html", {'form': form, 'openid': openid}, context_instance=RequestContext(request))

def ch_access_token(request):
    httpClient = None
    try:
        httpClient = httplib.HTTPSConnection('api.weixin.qq.com', timeout=30)
        httpClient.request('GET', '/cgi-bin/token?grant_type=client_credential&appid=wx90391d14181ccbdc&secret=221bdc228ef29d4abbc8e9a5534e10b1')
        response = httpClient.getresponse()
        if response.status == 200 and response.reason == 'OK':
            url = response.read()
            print "url:|||:", url
            jsonz = json.loads(url)

            accessToken = jsonz['access_token']
            expiresIn = time.time() + int(jsonz['expires_in'])
            print accessToken, expiresIn
            at = WXAccessToken.objects.filter(id=1)
            if at.exists():
                at = WXAccessToken.objects.get(id=1)
                at.accessToken = accessToken
                at.expiresIn = expiresIn
                at.save()
            else:
                at = WXAccessToken(accessToken=accessToken, expiresIn=expiresIn)
                at.Flag = 1
                at.save()
        return True
    except Exception, e:
        print "httpsClient to 'api.weixin.qq.com' ch_access_token get an error!", e
    finally:
        if httpClient:
            httpClient.close()